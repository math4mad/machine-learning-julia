---
title: "🌺🌸Iris dataset"
---

:::{.callout-note title="info"}

`IRIS` is a an famous dataset for statistics and data science. \r
it has long history. we will use it angain and agian.\r
erery time wo use iris dataset we can get new knowledge\r
it is like exercies for running

:::

## 1. load csv
```{julia}
 using CSV,DataFrames,Tidier
 using CairoMakie,AlgebraOfGraphics

 #df=download("http://localhost:5220/data/iris.csv")|>CSV.File|>DataFrame;
 df=CSV.File("../data/iris.csv")|>DataFrame
 first(df,5)
```

`CSV,DataFrames,Tidier` 用于数据框处理

`CairoMakie,AlgebraOfGraphics`用于绘图



## 2.  describe dataframe
```{julia}
describe(df)
```

## 3.  EDA 

### 3.1 density plot

```{julia}

palette = (color=tuple.(["#FC7808", "#8C00EC", "#107A78"], 0.65),
           marker=[:circle, :utriangle, :rect])
cycle = Cycle([:color, :marker], covary=true)


datalayer=data(df)
mappinglayer1=mapping(:sepal_length,:sepal_width,color=:species)
mappinglayer2=mapping(:sepal_length,color=:species)
mappinglayer3=mapping(:sepal_width,color=:species)

visuallayer1=visual(Scatter,strokewidth=1,storkecolor=:black)
visuallayer2=visual(Density)
visuallayer3=visual(Density,direction=:y)
plc=datalayer*mappinglayer1*visuallayer1  # top pic
plt=datalayer*mappinglayer2*visuallayer2  # main pic
plr=datalayer*mappinglayer3*visuallayer3  # right pic

with_theme(theme_light(),resolution = (600,400), palette=palette, Scatter=(cycle=cycle,)) do
        fig = Figure()
        axs = [Axis(fig[2,1], xlabel = "sepal_length", ylabel = "sepal_width"),
            Axis(fig[1,1]), Axis(fig[2,2])]
        dots = draw!(axs[1], plc)  # bject for lengend extract species info
        draw!(axs[2], plt)
        draw!(axs[3], plr)
        # getting the right layout aspect
        colsize!(fig.layout, 1, Auto(4.0))
        rowsize!(fig.layout, 1, Auto(1/3))
        colgap!(fig.layout,3)
        rowgap!(fig.layout, 3)
        linkxaxes!(axs[1], axs[2])
        linkyaxes!(axs[1], axs[3])
        hidedecorations!.(axs[2:3], grid=false)
        
        legend!(fig[1,2], dots)
        fig
    end

```

### 3.2 pair plot 
```{julia}
cats=["sepal_length", "sepal_width", "petal_length", "petal_width"]
len=length(cats)
cats=Symbol.(cats)


data_layer=data(df)

function make_layer(sy1::Symbol,sy2::Symbol)
   mapping_layer=sy1==sy2 ? mapping(sy1,color=:species) : mapping(sy1,sy2,color=:species)
   vis_layer=sy1==sy2 ? visual(Density,color=:species) : visual(Scatter,color=:species,strokewidth=1,storkecolor=:black)
   return  data_layer*mapping_layer*vis_layer
end

with_theme(theme_minimal(),resolution = (800,800), palette=palette, Scatter=(cycle=cycle,)) do
        cl=0.1
        fig = Figure()
        for i in 1:len
            for  j in 1:len
                ax=Axis(fig[i,j])
                j==1 ? ax.ylabel= String(cats[i]) : nothing
                i==len ? ax.xlabel= String(cats[j]) : nothing
                layer=make_layer(cats[i],cats[j])
              [i,j]==[len,len] ? cl=draw!(ax,layer) : draw!(ax,layer)
            end
        end
        legend!(fig[2:3,5], cl)
        fig
end


```
### 3.3 box plot 

**transform four feature to attribute and value**
```{julia}

long_data=@pivot_longer(df, 1:5, names_to = attribute, values_to = value,-species)
first(long_data,5)
```


```{julia}
data(long_data) * visual(BoxPlot, show_notch=true) *
    mapping(:attribute, :value, color=:species, dodge=:species) |> draw
```

### 3.4  correlation of numerical variables

```{julia}

```








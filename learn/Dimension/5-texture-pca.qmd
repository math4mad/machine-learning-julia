---
title: "5 texture data  pca"
---


:::{.callout-note title="info"}
 dataset ref: [data](https://online.stat.psu.edu/stat857/node/11/)

:::

## 1. load package
```{julia}
 import MLJ:transform,predict
 using CSV,DataFrames,Tidier,Pipe
 using CairoMakie,AlgebraOfGraphics,MakieThemes
 using MLJ,MLJModelInterface,Random
 #Makie.set_theme!(ggthemr(:flat))

```

## 2. load csv
```{julia}

df=CSV.File("../../data/Texture.csv")|>DataFrame
df=@chain df begin
   @clean_names 
   coerce(_,:a41=> Multiclass)
end


first(df,5)
```

## 3. describe df
```{julia}
schema(df)

```

## 4. split data
```{julia}
ytrain, Xtrain =  unpack(df, ==(:a41), rng=123);
rows,cols=size(Xtrain)
```

## 5.  MLJ PCA  workflow

###  5.1 load model
get mutliple dimension reduction 
storage in `res_arr ` 
```{julia}
PCA = @load PCA pkg=MultivariateStats
res_arr=[]
```

### 5.2 fitting model
reduce to   2-d data
```{julia}
model=PCA(maxoutdim=2)
mach = machine(model, Xtrain) |> fit!
Ytr =transform(mach, Xtrain)
#cat=levels(ytrain)|>unique
#cats=select(df,:a41)
```

### 5.3 plot results
```{julia}
#| fig-align: "center"
let
    ax=(width=400, height=300)
    table=DataFrame(x1=Ytr.x1,x2=Ytr.x2,cat=df.a41)
    datalayer=data(table)
    maplayer=mapping(:x1,:x2,color=:cat)
    vislayer=visual(Scatter, strokecolor=:black, strokewidth=0.5)
    plt=datalayer*maplayer*vislayer
    draw(plt,axis=ax)
end
```

## 6. project to serval dimension 
using pca=>lda workflow  

### 6.1 split data,load model
```{julia}
(Xtrain, Xtest), (ytrain, ytest)  = partition((Xtrain, ytrain), 0.7, multi=true,  rng=123)
LDA = @load LDA pkg=MultivariateStats
PCA = @load PCA pkg=MultivariateStats
```

### 6.2  fitting model
```{julia}
function different_pca_components(;n=3)
    acc_arr=[]
    for i in 1:n
        model1=PCA(maxoutdim=i)
        model2 = LDA()
        mach1 = machine(model1, Xtrain) |> fit!
        Ytr =transform(mach1, Xtrain)
        mach2 = machine(model2, Ytr, ytrain)|>fit!
        Yte=transform(mach1, Xtest)
        yhat = predict_mode(mach2, Yte)
        res=accuracy(yhat,ytest)
        push!(acc_arr,res)
    end
    return acc_arr
end
acc_arr=different_pca_components(;n=15)

```

### 6.3 plot results
```{julia}
function plot_accuracy(acc_arr)
    len=length(acc_arr)
    fig=Figure()
    ax=Axis(fig[1,1],xlabel="pcs",ylabel="accuracy",title="LDA accruacy with n primary components")
    xs=1:len
    acc_arr=round.(acc_arr,digits=3)
    scatterlines!(ax,xs,acc_arr,markercolor = (:red,0.5))
    fig
    #save("16-texture-PCA-LDA.png",fig)
end

plot_accuracy(acc_arr)
```











